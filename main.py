from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, callback_query
from aiogram.types import ContentType
from datetime import datetime, timedelta
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from typing import Union
import logging
import sqlite3
import os

from apscheduler.schedulers.asyncio import AsyncIOScheduler


API_TOKEN = 'API_TOKEN'
PAYMENTS_PROVIDER_TOKEN = os.getenv('PAYMENTS_PROVIDER_TOKEN')
CHANNEL_LINK = os.getenv('CHANNEL_LINK')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
cursor = conn.cursor()

#–∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏—Ç—å
keyboard = InlineKeyboardMarkup(resize_keyboard=True)
button_text = "—Ö–æ—á—É —Ä–µ—Ü–µ–ø—Ç—ã ü•£"  # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
button = InlineKeyboardButton(button_text, callback_data='buy')  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
keyboard.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id INTEGER PRIMARY KEY,
    telegram_id TEXT NOT NULL,
    username TEXT,
    full_name TEXT NOT NULL,
    age INTEGER,
    has_subscription BOOLEAN NOT NULL DEFAULT 0,
    subscription_date TEXT,
    first_payment_date TEXT,
    has_paid BOOLEAN NOT NULL DEFAULT 0
)
''')
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()
scheduler.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
def update_subscription_status(user_id, subscription_date):
    cursor.execute('UPDATE subscriptions SET has_subscription = 1, subscription_date = ? WHERE user_id = ?', (subscription_date, user_id))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, telegram_id, username, full_name, age):
    cursor.execute('INSERT INTO subscriptions (user_id, telegram_id, username, full_name, age, has_paid) VALUES (?, ?, ?, ?, ?, ?)',
                   (user_id, telegram_id, username, full_name, age, 0))
    conn.commit()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT user_id FROM subscriptions WHERE user_id = ?', (message.from_user.id,))
    result = cursor.fetchone()
    if result is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        register_user(message.from_user.id, message.from_user.id, message.from_user.username, message.from_user.full_name, 0)
        # await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await message.answer("""‚≠ïÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ:
- –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: 800—Ä
- –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: 300—Ä""")
        await message.answer("–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=keyboard)
    else:
        # await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await message.answer("""‚≠ïÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ:
- –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: 800—Ä
- –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: 300—Ä""")
        await message.answer("–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=keyboard)
@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked_handler(update: types. Update, exception: BotBlocked) -> bool:
    print( '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"
@dp.callback_query_handler(lambda query: query.data == 'buy_subscription')
async def handle_buy_subscription(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    await bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
                           reply_markup=types.InlineKeyboardMarkup(
                               inline_keyboard=[
                                   [
                                       types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")
                                   ]
                               ]
                           ))
@dp.message_handler(commands=['buy'])
async def cmd_subscribe(message: types.Message):
    await message.answer("–û–ø–ª–∞—Ç–∞ üí≥", reply_markup=keyboard)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy
@dp.callback_query_handler(lambda query: query.data == 'buy')
async def cmd_subscribe(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
    cursor.execute('SELECT has_paid FROM subscriptions WHERE user_id = ?', (callback_query.from_user.id,))
    result = cursor.fetchone()
    if result is None or not result[0]:
        # –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
        await bot.send_invoice(
            callback_query.from_user.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã",
            description="–û–ø–ª–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            currency="rub",
            prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=800*100)],  # 800 —Ä—É–±–ª–µ–π
            start_parameter="subscription",
            payload="subscription-payment",
            # photo_url="https://www.google.com/url?sa=i&url=https%3A%2F%2Fsteamcommunity.com%2Fsharedfiles%2Ffiledetails%2F%3Fid%3D2280067424&psig=AOvVaw00vhGqiTKf3BVEWiHfSKbW&ust=1714223201737000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCNiPlpr534UDFQAAAAAdAAAAABAJ",
            # photo_height=512,
            # photo_width=512,
            # photo_size=51200
        )
    else:
        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await bot.send_invoice(
            callback_query.from_user.id,
            title="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            description="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            currency="rub",
            prices=[LabeledPrice(label="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ", amount=300*100)],  # 300 —Ä—É–±–ª–µ–π
            start_parameter="subscription_renewal",
            payload="subscription-renewal-payment",
            # photo_url="https://www.google.com/url?sa=i&url=https%3A%2F%2Fsteamcommunity.com%2Fsharedfiles%2Ffiledetails%2F%3Fid%3D2280067424&psig=AOvVaw00vhGqiTKf3BVEWiHfSKbW&ust=1714223201737000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCNiPlpr534UDFQAAAAAdAAAAABAJ",
            # photo_height=512,
            # photo_width=512,
            # photo_size=51200
        )
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
# @dp.pre_checkout_query_handler(lambda query: not query.ok)
# async def not_successful_payment(pre_checkout_q: PreCheckoutQuery):
#     user_id = pre_checkout_q.from_user.id
#     await bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
async def kick_user(user_id):
    cursor.execute('SELECT full_name FROM subscriptions WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    admin_id = '640485918'
    if result:
        full_name = result[0]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        await bot.send_message(admin_id, f"{full_name}, —É–¥–∞–ª–∏ –µ–≥–æ")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
async def cancel_subscription(user_id, start_date):
    cursor.execute('UPDATE subscriptions SET has_subscription = 0 WHERE user_id = ?', (user_id,))
    conn.commit()
    await bot.send_message(user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
    await kick_user(user_id)
    admin_id = '640485918'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—à—ë–ª –ª–∏ –º–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã
async def check_subscription_expiration(user_id):
    cursor.execute('SELECT has_subscription, subscription_date FROM subscriptions WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result and result[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
        subscription_date = datetime.strptime(result[1], '%Y-%m-%d %H:%M:%S')
        if subscription_date + timedelta(seconds=10) <= datetime.now():
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            await bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    update_subscription_status(message.from_user.id, subscription_date)

    # Set has_paid to True for the user
    cursor.execute('UPDATE subscriptions SET has_paid = 1 WHERE user_id = ?', (message.from_user.id,))
    conn.commit()

    await check_subscription_expiration(message.from_user.id)

    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    await bot.send_message(message.chat.id, f'—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_LINK}')

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ 
    scheduler.add_job(check_subscription_expiration, 'date', run_date=datetime.now() + timedelta(seconds=10),
                      args=[message.from_user.id])

    cursor.execute('SELECT has_subscription FROM subscriptions WHERE user_id = ?', (message.from_user.id,))
    result = cursor.fetchone()
    if result and result[0]:
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ has_subscription = 0
        start_date = datetime.now() + timedelta(seconds=20)
        scheduler.add_job(cancel_subscription, 'date', run_date=start_date, args=[message.from_user.id, start_date])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_subscription_status(user_id):
    cursor = conn.cursor()
    cursor.execute('SELECT has_subscription FROM subscriptions WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else False

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã:–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
@dp.message_handler(commands=['share'])
async def share(message: Message):
        invite_message = "–ü–æ–¥–µ–ª–∏—Å—å –º–Ω–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏–º —ç—Ç—É —Å—Å—ã–ª–∫—É: https://t.me/Oksyourselfbot"
        await message.answer(invite_message)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['status'])
async def check_subscription_status(message: types.Message):
    cursor = conn.cursor()
    cursor.execute('SELECT has_subscription FROM subscriptions WHERE user_id = ?', (message.from_user.id,))
    result = cursor.fetchone()
    if result is not None:
        has_subscription = result[0]
        if has_subscription:
            await bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            await bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", reply_markup=keyboard)
    else:
        await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['cancel'])
async def cancel(message: Message):
    cursor = conn.cursor()
    cursor.execute('UPDATE subscriptions SET has_subscription = 0 WHERE user_id = ?', (message.from_user.id,))
    conn.commit()
    await bot.send_message(message.chat.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await bot.send_message(message.chat.id, "—Å–ø–∞—Å–∏–±–æ —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ ‚ù§Ô∏è")

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: –ø–æ–º–æ—â—å
@dp.message_handler(commands=['help'])
async def help(message: Message):
    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –º—ã –≤–∞—Å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–ª—É—à–∞–µ–º: https://t.me/Oksyourself")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)